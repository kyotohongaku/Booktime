import de.audiobook.player.signing.SigningDetailsProvider

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply from: "../artifacts.gradle"

android {
  defaultConfig {
    applicationId 'com.audiobook.player'
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionName project.ext.versionName
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    ndk {
      abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
    }
  }
  signingConfigs {
    release {
      def signingPropFile = new File('signing.properties')
      def signingDetailsProvider = new SigningDetailsProvider()
      def signingDetails = signingDetailsProvider.provide(signingPropFile)
      if (signingDetails != null) {
        storeFile = signingDetails.storeFile
        storePassword = signingDetails.storePassword
        keyAlias = signingDetails.keyAlias
        keyPassword = signingDetails.keyPassword
      }
    }
  }
  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
      signingConfig signingConfigs.release
      multiDexEnabled false
    }
    debug {
      minifyEnabled false
      shrinkResources false
      ext.enableCrashlytics = false
      multiDexEnabled true
    }
  }
  testOptions.unitTests.returnDefaultValues = true
  lintOptions.abortOnError = false
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
  //noinspection GroovyMissingReturnStatement
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }
  flavorDimensions "free"
  productFlavors {
    opensource {
      dimension "free"
    }
    proprietary {
      dimension "free"
    }
  }
  dataBinding.enabled = true
  buildToolsVersion '27.0.3'
  compileSdkVersion 26
}

dependencies {
  implementation project(':core')
  implementation project(':common')
  implementation project(':data')
  implementation 'com.github.PaulWoitaschek:ChapterReader:0.1.3'
  kapt libraries.dataBindingCompiler
  implementation libraries.support.appCompat
  implementation libraries.support.recyclerView
  implementation libraries.support.design
  implementation libraries.support.transitions
  implementation libraries.support.constraintLayout
  implementation libraries.picasso
  implementation libraries.materialDialogs
  implementation libraries.materialCab
  implementation libraries.floatingActionButton
  proprietaryImplementation(libraries.crashlytics) {
    transitive = true
  }
  implementation libraries.dagger.core
  implementation libraries.dagger.android
  kapt libraries.dagger.compiler
  kapt libraries.dagger.androidProcessor
  testImplementation libraries.junit
  testImplementation libraries.truth
  testImplementation libraries.mockito
  testImplementation libraries.mockitoKotlin
  androidTestImplementation libraries.support.testRunner
  androidTestImplementation libraries.truth
  implementation libraries.rxJava
  implementation libraries.rxAndroid
  implementation libraries.rxInterop
  implementation libraries.rxPreferences
  implementation libraries.kotlinStdLib
  implementation libraries.kotlinCoroutines
  implementation libraries.kotlinCoroutinesAndroid
  implementation libraries.timber
  implementation libraries.exoPlayer.core
  implementation libraries.exoPlayer.flac
  implementation libraries.exoPlayer.opus
  implementation libraries.conductor.base
  implementation libraries.conductor.support
  implementation libraries.conductor.lifecycle
  implementation libraries.moshi
  implementation libraries.tapTarget
}

// task that is an alias for f-droid
task fdroid(dependsOn: ':app:assembleOpensourceRelease')
task release(dependsOn: ':app:assembleProprietaryRelease')

kotlin {
  experimental {
    coroutines "enable"
  }
}
